# this just an example of how to use beautiful soup to find potential vulnerabilities.
# it still require many changes according to the website.

import requests
from bs4 import BeautifulSoup

# Function to check for IDOR, SQL injection, and CSRF indicators
def check_for_security_issues(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')

            # Check for potential IDOR indicators
            links = soup.find_all('a')
            for link in links:
                href = link.get('href')
                if '../' in href:
                    print(f"Potential Insecure Direct Object Reference (IDOR) found in link: {href}")

            # Check for potential SQL injection indicators
            forms = soup.find_all('form')
            for form in forms:
                action = form.get('action')
                if 'sql' in action.lower() or 'query' in action.lower():
                    print(f"Potential SQL Injection vulnerability found in form action: {action}")

            # Check for potential CSRF indicators (simplified, might not cover all cases)
            inputs = soup.find_all('input')
            for inp in inputs:
                input_type = inp.get('type')
                if input_type == 'hidden':
                    print("Potential Cross-Site Request Forgery (CSRF) vulnerability found (hidden input field)")

        else:
            print("Failed to retrieve the page.")
    except requests.RequestException as e:
        print(f"Request error: {e}")

def main():

    # Replace this with the URL you want to check
    website_url = 'https://www.example.com'

    # Run the function to check for potential vulnerabilities
    check_for_security_issues(website_url)

if __name__ == '__main__':
    main()
